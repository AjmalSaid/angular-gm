/**
 * AngularGM - Google Maps Directives for AngularJS
 * @version v0.0.1 - 2013-03-23
 * @link http://dylanfprice.github.com/angular-gm
 * @author Dylan Price <the.dylan.price@gmail.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"use strict";(function(){angular.module("AngularGM").directive("gmMap",["$timeout","angulargmControllerFactory",function(n,t){function a(t,a,e,r){if(angular.isDefined(t.gmCenter)||(t.center={}),angular.isDefined(t.gmBounds)||(t.bounds={}),!angular.isDefined(t.gmMapId))throw"angulargm must have non-empty gmMapId attribute";var o=!1,i=!1,g=!1;e.hasOwnProperty("gmCenter")&&(o=!0),e.hasOwnProperty("gmZoom")&&(i=!0),e.hasOwnProperty("gmBounds")&&(g=!0);var s=function(){n(function(){(o||i||g)&&t.$apply(function(){if(o&&(t.gmCenter=r.center),i&&(t.gmZoom=r.zoom),g){var n=r.bounds;n&&(t.gmBounds=n)}})})};r.addMapListener("drag",s),r.addMapListener("zoom_changed",s),r.addMapListener("center_changed",s),r.addMapListener("bounds_changed",s),o&&t.$watch("gmCenter",function(n,t){var a=n!==t;if(a&&!r.dragging){var e=n;e&&(r.center=e)}},!0),i&&t.$watch("gmZoom",function(n,t){var a=null!=n&&!isNaN(n);a&&n!==t&&(r.zoom=n)}),g&&t.$watch("gmBounds",function(n,t){var a=n!==t;if(a&&!r.dragging){var e=n;e&&(r.bounds=e)}})}return{restrict:"AE",priority:100,template:'<div><div id="" style="width:100%;height:100%;"></div><div ng-transclude></div></div>',transclude:!0,replace:!0,scope:{gmCenter:"=",gmZoom:"=",gmBounds:"=",gmMapOptions:"&",gmMapId:"&"},controller:t.MapController,link:a}}])})(),function(){angular.module("AngularGM").directive("gmMarkers",["$log","$parse","$timeout","angulargmUtils",function(n,t,a,e){function r(n,e,r,i){if(!("gmObjects"in r))throw"gmObjects attribute required";if(!("gmGetLatLng"in r))throw"gmGetLatLng attribute required";var g={};angular.forEach(r,function(n,a){if(0===a.lastIndexOf("gmOn",0)){var e=angular.lowercase(a.substring(4)),r=t(n);g[e]=r}});var s=function(t){var e=n.gmMarkerOptions(),r={};angular.forEach(t,function(t){var s=n.gmGetLatLng({object:t}),u=o(s);if(null!=u){var l=u.toUrlValue(i.precision);if(r[l]=t,!i.hasMarker(s.lat,s.lng)){var c={};angular.extend(c,e,{position:u}),i.addMarker(c);var p=i.getMarker(s.lat,s.lng);angular.forEach(g,function(e,r){i.addListener(p,r,function(){a(function(){e(n.$parent.$parent,{object:t,marker:p})})})})}}});var s=[];i.forEachMarker(function(n){var t=n.getPosition(),a=t.toUrlValue(i.precision);a in r||s.push(n)}),angular.forEach(s,function(n){var t=n.getPosition();i.removeMarker(t.lat(),t.lng())})};n.$watch("gmObjects().length",function(t,a){null!=t&&t!==a&&s(n.gmObjects())}),n.$watch("gmObjects()",function(t,a){null!=t&&t!==a&&s(n.gmObjects())}),n.$watch("gmEvent()",function(n,t){if(null!=n&&n!==t){var e=n.event,r=n.location,o=i.getMarker(r.lat(),r.lng());null!=o&&a(angular.bind(this,i.trigger,o,e))}}),a(angular.bind(null,s,n.gmObjects()))}e.latLngEqual;var o=e.objToLatLng;return{restrict:"AE",priority:100,scope:{gmObjects:"&",gmGetLatLng:"&",gmMarkerOptions:"&",gmEvent:"&"},require:"^gmMap",link:r}}])}(),function(){angular.module("AngularGM",[]).value("angulargmDefaults",{mapOptions:{zoom:8,center:new google.maps.LatLng(46,-120),mapTypeId:google.maps.MapTypeId.ROADMAP}})}(),function(){angular.module("AngularGM").factory("angulargmContainer",["$q",function(n){function t(n,t){if(!(t instanceof google.maps.Map))throw"map not a google.maps.Map: "+t;if(n in i)throw"already contain map with id "+n;i[n]=t,n in g&&g[n].resolve(t)}function a(n){return i[n]}function e(t){var a=g[t]||n.defer();return g[t]=a,a.promise}function r(n){n in i&&delete i[n],n in g&&delete g[n]}function o(){i={},g={}}var i={},g={};return{addMap:t,getMap:a,getMapPromise:e,removeMap:r,clear:o}}])}(),function(){angular.module("AngularGM").factory("angulargmControllerFactory",["angulargmUtils","angulargmDefaults","angulargmContainer",function(n,t,a){var e=n.latLngEqual,r=n.boundsEqual,o=n.hasNaN,i=t,g=a,s=function(n,t){var a=n.gmMapId();if(!a)throw"angulargm must have non-empty gmMapId attribute";var u=t.find("[id]");u.attr("id",a);var l=this._getConfig(n,i);this._map=this._createMap(a,u,l,g),this._markers={},this.dragging=!1,Object.defineProperties(this,{precision:{value:s.precision,writeable:!1},center:{configurable:!0,get:function(){return this._map.getCenter()},set:function(n){if(o(n))throw"center contains null or NaN";var t=!e(this.center,n);t&&this._map.panTo(n)}},zoom:{configurable:!0,get:function(){return this._map.getZoom()},set:function(n){if(null==n||isNaN(n))throw"zoom was null or NaN";var t=this.zoom!==n;t&&this._map.setZoom(n)}},bounds:{configurable:!0,get:function(){return this._map.getBounds()},set:function(n){var t=!o(n.getSouthWest())&&!o(n.getNorthEast());if(!t)throw"bounds contains null or NaN";var a=!r(this.bounds,n);a&&this._map.fitBounds(n)}}}),this._initDragListeners(),n.$on("$destroy",angular.bind(this,this._destroy,a))};return s.precision=3,s.prototype._getConfig=function(n,t){var a=t.mapOptions,e={};return angular.extend(e,a,n.gmMapOptions()),e},s.prototype._createMap=function(n,t,a,e){var r=e.getMap(n);if(r)throw"A map with id "+n+" already exists. You must use"+" different ids for each instance of the angulargm directive.";return r=new google.maps.Map(t[0],a),e.addMap(n,r),r},s.prototype._initDragListeners=function(){var n=this;this.addMapListener("dragstart",function(){n.dragging=!0}),this.addMapListener("idle",function(){n.dragging=!1}),this.addMapListener("drag",function(){n.dragging=!0})},s.prototype._destroy=function(n){g.removeMap(n)},s.prototype.addMapListener=function(n,t){google.maps.event.addListener(this._map,n,t)},s.prototype.addMapListenerOnce=function(n,t){google.maps.event.addListenerOnce(this._map,n,t)},s.prototype.addListener=function(n,t,a){google.maps.event.addListener(n,t,a)},s.prototype.addListenerOnce=function(n,t,a){google.maps.event.addListenerOnce(n,t,a)},s.prototype.mapTrigger=function(n){google.maps.event.trigger(this._map,n)},s.prototype.trigger=function(n,t){google.maps.event.trigger(n,t)},s.prototype.addMarker=function(n){var t={};if(angular.extend(t,n),!(t.position instanceof google.maps.LatLng))throw"markerOptions did not contain a position";var a=new google.maps.Marker(t),e=a.getPosition();if(this.hasMarker(e.lat(),e.lng()))return!1;var r=e.toUrlValue(this.precision);return this._markers[r]=a,a.setMap(this._map),!0},s.prototype.hasMarker=function(n,t){return this.getMarker(n,t)instanceof google.maps.Marker},s.prototype.getMarker=function(n,t){if(null==n||null==t)throw"lat or lng was null";var a=new google.maps.LatLng(n,t),e=a.toUrlValue(this.precision);return e in this._markers?this._markers[e]:null},s.prototype.removeMarker=function(n,t){if(null==n||null==t)throw"lat or lng was null";var a=new google.maps.LatLng(n,t),e=!1,r=a.toUrlValue(this.precision),o=this._markers[r];return o&&(o.setMap(null),e=!0),this._markers[r]=null,delete this._markers[r],e},s.prototype.fitToMarkers=function(){var n=new google.maps.LatLngBounds;this.forEachMarker(function(t){n.extend(t.getPosition())}),this.bounds=n},s.prototype.forEachMarker=function(n){if(null==n)throw"fn was null or undefined";angular.forEach(this._markers,function(t){null!=t&&n(t)})},{MapController:s}}])}(),function(){angular.module("AngularGM").factory("angulargmUtils",[function(){function n(n,t){return 1e-6>Math.abs(n-t)}function t(t,a){return t instanceof google.maps.LatLng&&a instanceof google.maps.LatLng?n(t.lat(),a.lat())&&n(t.lng(),a.lng()):!1}function a(n,a){if(!(n instanceof google.maps.LatLngBounds&&a instanceof google.maps.LatLngBounds))return!1;var e=n.getSouthWest(),r=a.getSouthWest(),o=n.getNorthEast(),i=a.getNorthEast();return t(e,r)&&t(o,i)}function e(n){if(!(n instanceof google.maps.LatLng))throw"latLng not a google.maps.LatLng";return{lat:n.lat(),lng:n.lng()}}function r(n){if(null!=n){var t=n.lat,a=n.lng,e=!(null==t||null==a||isNaN(t)||isNaN(a));if(e)return new google.maps.LatLng(t,a)}return null}function o(n){if(!(n instanceof google.maps.LatLng))throw"latLng must be a google.maps.LatLng";var t=null==n.lat()||null==n.lng(),a=isNaN(n.lat())||isNaN(n.lng());return t||a}return{latLngEqual:t,boundsEqual:a,latLngToObj:e,objToLatLng:r,hasNaN:o}}])}();